(()=>{"use strict";var e={424:(e,t,n)=>{n.d(t,{Z:()=>i});var r=n(537),o=n.n(r),a=n(645),c=n.n(a)()(o());c.push([e.id,"body{\r\n  background-color: rgb(237, 239, 223);\r\n}","",{version:3,sources:["webpack://./src/index.css"],names:[],mappings:"AAAA;EACE,oCAAoC;AACtC",sourcesContent:["body{\r\n  background-color: rgb(237, 239, 223);\r\n}"],sourceRoot:""}]);const i=c},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var c={};if(r)for(var i=0;i<this.length;i++){var s=this[i][0];null!=s&&(c[s]=!0)}for(var u=0;u<e.length;u++){var d=[].concat(e[u]);r&&c[d[0]]||(void 0!==a&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=a),n&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=n):d[2]=n),o&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=o):d[4]="".concat(o)),t.push(d))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */");return[t].concat([a]).join("\n")}return[t].join("\n")}},548:(e,t,n)=>{n.r(t),n.d(t,{default:()=>g});var r=n(379),o=n.n(r),a=n(795),c=n.n(a),i=n(569),s=n.n(i),u=n(565),d=n.n(u),l=n(216),p=n.n(l),f=n(589),h=n.n(f),v=n(424),b={};b.styleTagTransform=h(),b.setAttributes=d(),b.insert=s().bind(null,"head"),b.domAPI=c(),b.insertStyleElement=p(),o()(v.Z,b);const g=v.Z&&v.Z.locals?v.Z.locals:void 0},379:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var a={},c=[],i=0;i<e.length;i++){var s=e[i],u=r.base?s[0]+r.base:s[0],d=a[u]||0,l="".concat(u," ").concat(d);a[u]=d+1;var p=n(l),f={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==p)t[p].references++,t[p].updater(f);else{var h=o(f,r);r.byIndex=i,t.splice(i,0,{identifier:l,updater:h,references:1})}c.push(l)}return c}function o(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var a=r(e=e||[],o=o||{});return function(e){e=e||[];for(var c=0;c<a.length;c++){var i=n(a[c]);t[i].references--}for(var s=r(e,o),u=0;u<a.length;u++){var d=n(a[u]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}a=s}}},569:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},600:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Header=void 0;const r=n(88),o=[{id:"garage",buttonText:"Garage"},{id:"winners",buttonText:"Winners"}],a=document.createElement("h1");a.textContent="Async Race";class c extends r.Component{constructor(e,t){super(e,t)}renderPage(){const e=document.createElement("div");o.forEach((t=>{const n=document.createElement("button"),r=document.createElement("a");r.href=`#${t.id}`,r.textContent=t.buttonText,n.append(r),e.append(n)})),this.container.append(a),this.container.append(e)}render(){return this.renderPage(),this.container}}t.Header=c},88:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Component=void 0,t.Component=class{constructor(e,t){this.container=document.createElement(e),this.container.className=t}render(){return this.container}}},978:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Page=void 0,t.Page=class{constructor(e){this.container=document.createElement("div"),this.container.id=e}createTitle(e,t){const n=document.createElement(e);return n.innerText=t,n}render(){return this.container}}},607:function(e,t,n){var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(o,a){function c(e){try{s(r.next(e))}catch(e){a(e)}}function i(e){try{s(r.throw(e))}catch(e){a(e)}}function s(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(c,i)}s((r=r.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),n(548);const o=n(257);let a=((e,t=7)=>r(void 0,void 0,void 0,(function*(){const n=yield fetch(`http://127.0.0.1:3000/garage?_page${e}&_limit${t}`);return{items:yield n.json(),count:n.headers.get("X-Total-Count")}})))(1,2).then((e=>console.log(e.items)));console.log("cars",a.then),console.log("huiii!!!!!"),(new o.App).run()},257:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.App=void 0;const r=n(597),o=n(706),a=n(600);class c{constructor(){this.initialPage=new r.Garage("garage"),this.header=new a.Header("header","header")}static renderPage(e){const t=document.querySelector(`#${c.defaultPageId}`);t&&t.remove();let n=null;if("garage"===e?n=new r.Garage(e):"winners"===e&&(n=new o.Winners(e)),n){const e=n.render();e.id=c.defaultPageId,c.container.append(e)}}routeChange(){window.addEventListener("hashchange",(()=>{const e=window.location.hash.slice(1);c.renderPage(e)}))}run(){c.container.append(this.header.render()),c.renderPage("garage"),this.routeChange()}}t.App=c,c.container=document.body,c.defaultPageId="current-page"},843:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.buttonsBlock=t.inputBlock=void 0,t.inputBlock=e=>`\n<div>\n  <input type="text" class="input-text ${e}-input">\n  <button class="button ${e}-color">choose color</button>\n  <button class="button ${e}-button">${e}</button>  \n</div>\n`,t.buttonsBlock=(e,t,n)=>`\n<div>  \n  <button class="button ${e}-button">${e}</button>\n  <button class="button ${t}-button">${t}</button>\n  <button class="button ${n}-button">${n}</button>    \n</div>\n`},597:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Garage=void 0;const r=n(978),o=n(843),a=(0,o.inputBlock)("create"),c=(0,o.inputBlock)("update"),i=(0,o.buttonsBlock)("race","reset","generate-cars");class s extends r.Page{constructor(e){super(e)}render(){const e=this.createTitle("h2",s.TextObj.headerTitle),t=this.createTitle("h3",s.TextObj.secHeader);return this.container.append(e),this.container.insertAdjacentHTML("beforeend",a),this.container.insertAdjacentHTML("beforeend",c),this.container.insertAdjacentHTML("beforeend",i),this.container.append(t),this.container}}t.Garage=s,s.TextObj={headerTitle:"Garage",secHeader:"Page add number of page"}},706:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Winners=void 0;const r=n(978);class o extends r.Page{constructor(e){super(e)}render(){const e=this.createTitle("h2",o.TextObj.headerTitle);return this.container.append(e),this.container}}t.Winners=o,o.TextObj={headerTitle:"Winners"}}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var a=t[r]={id:r,exports:{}};return e[r].call(a.exports,a,a.exports,n),a.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.nc=void 0,n(607)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,